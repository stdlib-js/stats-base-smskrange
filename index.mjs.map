{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/smskrange.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\nimport isnanf from '@stdlib/math-base-assert-is-nanf';\n\n\n// MAIN //\n\n/**\n* Computes the range of a single-precision floating-point strided array according to a mask.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Uint8Array} mask - mask array\n* @param {integer} strideMask - `mask` stride length\n* @param {NonNegativeInteger} offsetMask - `mask` starting index\n* @returns {number} range\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n* import Uint8Array from '@stdlib/array-uint8';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var mask = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 ] );\n*\n* var v = smskrange( 5, x, 2, 1, mask, 2, 1 );\n* // returns 6.0\n*/\nfunction smskrange( N, x, strideX, offsetX, mask, strideMask, offsetMask ) {\n\tvar max;\n\tvar min;\n\tvar ix;\n\tvar im;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tix = offsetX;\n\tim = offsetMask;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( mask[ im ] === 0 ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += strideX;\n\t\tim += strideMask;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\tmin = x[ ix ];\n\tif ( isnanf( min ) ) {\n\t\treturn min;\n\t}\n\tmax = min;\n\ti += 1;\n\tfor ( i; i < N; i++ ) {\n\t\tix += strideX;\n\t\tim += strideMask;\n\t\tif ( mask[ im ] ) {\n\t\t\tcontinue;\n\t\t}\n\t\tv = x[ ix ];\n\t\tif ( isnanf( v ) ) {\n\t\t\treturn v;\n\t\t}\n\t\tif ( v < min ) {\n\t\t\tmin = v;\n\t\t} else if ( v > max ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn float64ToFloat32( max - min );\n}\n\n\n// EXPORTS //\n\nexport default smskrange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the range of a single-precision floating-point strided array according to a mask.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Uint8Array} mask - mask array\n* @param {integer} strideMask - `mask` stride length\n* @returns {number} range\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n* import Uint8Array from '@stdlib/array-uint8';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 4.0, 2.0 ] );\n* var mask = new Uint8Array( [ 0, 0, 1, 0 ] );\n*\n* var v = smskrange( x.length, x, 1, mask, 1 );\n* // returns 4.0\n*/\nfunction smskrange( N, x, strideX, mask, strideMask ) {\n\tvar ox = stride2offset( N, strideX );\n\tvar om = stride2offset( N, strideMask );\n\treturn ndarray( N, x, strideX, ox, mask, strideMask, om );\n}\n\n\n// EXPORTS //\n\nexport default smskrange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport smskrange from './smskrange.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( smskrange, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default smskrange;\n"],"names":["smskrange","N","x","strideX","offsetX","mask","strideMask","offsetMask","max","min","ix","im","v","i","NaN","isnanf","float64ToFloat32","ndarray","stride2offset","setReadOnly"],"mappings":";;yaAkDA,SAASA,EAAWC,EAAGC,EAAGC,EAASC,EAASC,EAAMC,EAAYC,GAC7D,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKZ,GAAK,EACT,OAAOa,IAIR,IAFAJ,EAAKN,EACLO,EAAKJ,EACCM,EAAI,EAAGA,EAAIZ,GACI,IAAfI,EAAMM,GADQE,IAInBH,GAAMP,EACNQ,GAAML,EAEP,GAAKO,IAAMZ,EACV,OAAOa,IAGR,GADAL,EAAMP,EAAGQ,GACJK,EAAQN,GACZ,OAAOA,EAIR,IAFAD,EAAMC,EACNI,GAAK,EACIA,EAAIZ,EAAGY,IAGf,GAFAH,GAAMP,GAEDE,EADLM,GAAML,GACN,CAIA,GADAM,EAAIV,EAAGQ,GACFK,EAAQH,GACZ,OAAOA,EAEHA,EAAIH,EACRA,EAAMG,EACKA,EAAIJ,IACfA,EAAMI,EARN,CAWF,OAAOI,EAAkBR,EAAMC,EAChC,CChDA,SAAST,EAAWC,EAAGC,EAAGC,EAASE,EAAMC,GAGxC,OAAOW,EAAShB,EAAGC,EAAGC,EAFbe,EAAejB,EAAGE,GAEQE,EAAMC,EADhCY,EAAejB,EAAGK,GAE5B,CCvBAa,EAAAnB,EAAA,UAAAiB"}